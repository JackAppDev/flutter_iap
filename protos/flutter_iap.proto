syntax = "proto2";

option java_package = "com.jackappdev.flutteriap";

// Defines the response status for a IAP operation.
enum IAPResponseStatus {
    // All went well, see the other fields for response details.
    ok = 0;

    // Fatal error during the API action.
    error = 1;

    // (iOS only) Library user needs to fetch the list of products from the store first.
    emptyProductList = 2;

    // In-App purchases not available (device or policy constraints etc).
    // TODO: Merge with [billingUnavailable]
    disabled = 3;

    // User pressed back or canceled a dialog
    userCanceled = 4;

    // Network connection is down
    serviceUnavailable = 5;

    // Billing API version is not supported for the type requested
    billingUnavailable = 6;

    // Requested product is not available for purchase
    itemUnavailable = 7;

    // Invalid arguments provided to the API. This error can also indicate that the application was
    // not correctly signed or properly set up for In-app Billing in Google Play, or does not have
    // the necessary permissions in its manifest
    developerError = 8;

    // Failure to purchase since item is already owned
    itemAlreadyOwned = 9;

    // Failure to consume since item is not owned
    itemNotOwned = 10;

    // Android: Requested feature is not supported by Play Store on the current device
    featureNotSupported = 11;

    // Android: Play Store service is not connected now - potentially transient state.
    serviceDisconnected = 12;
}

// Type of IAP product.
// The calling app should manage the list of SKUs and their corresponding types, because:
// iOS supports different IAP and subscription types, however the actual definition is not available through StoreKit.
// On Android a IAP is non-consumable until it has been consumed, eliminating the explicit type definition.
enum IAPProductType {
    // Consumable or non-consumable IAP.
    iap = 0;
    // Renewable or non-renewable IAP.
    subscription = 1;
}

message IAPPurchaseRequest {
  required string productIdentifier = 1;
  required IAPProductType type = 2;
}

message IAPFetchProductsRequest { 
  repeated string productIdentifier = 1;  
}

message IAPPurchase {
  required string productIdentifier = 1;
  optional string signature = 2;
  optional string originalJson = 3;
  optional string orderId = 4;
  optional string packageName = 5;
  optional int64 purchaseTime = 6;
  optional string purchaseToken = 7;
}

// https://developer.apple.com/documentation/storekit/skproductdiscount/paymentmode
enum IAPIntroductoryPricePaymentMode {
   payAsYouGo = 0;
   payUpFront = 1;
   freeTrial = 2; 
}

message IAPProduct {
  required IAPProductType type = 1;
  required string productIdentifier = 2;
  optional string localizedTitle = 3;
  optional string localizedDescription = 4;
  optional string price = 5;
  optional string priceLocale = 6;
  optional string localizedPrice = 7;
  optional bool isDownloadable = 8;
  optional string downloadContentLengths = 9;
  optional string downloadContentVersion = 10;
  optional string freeTrialPeriod = 11;

  // Only applies to subscriptions.
  optional string subscriptionPeriod = 20;
  optional string introductoryPrice = 21;
  optional string introductoryPricePeriod = 22;
  optional string introductoryPriceCycles = 23;
}

message IAPResponse {
    required IAPResponseStatus status = 1;
    optional string statusMessage = 2;
    repeated IAPPurchase purchases = 3;
    repeated IAPProduct products = 4;
}