// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: flutter_iap.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Defines the response status for a IAP operation.
enum IAPResponseStatus: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// All went well, see the other fields for response details.
  case ok // = 0

  /// Fatal error during the API action.
  case error // = 1

  /// (iOS only) Library user needs to fetch the list of products from the store first.
  case emptyProductList // = 2

  /// In-App purchases not available (device or policy constraints etc).
  /// TODO: Merge with [billingUnavailable]
  case disabled // = 3

  /// User pressed back or canceled a dialog
  case userCanceled // = 4

  /// Network connection is down
  case serviceUnavailable // = 5

  /// Billing API version is not supported for the type requested
  case billingUnavailable // = 6

  /// Requested product is not available for purchase
  case itemUnavailable // = 7

  /// Invalid arguments provided to the API. This error can also indicate that the application was
  /// not correctly signed or properly set up for In-app Billing in Google Play, or does not have
  /// the necessary permissions in its manifest
  case developerError // = 8

  /// Failure to purchase since item is already owned
  case itemAlreadyOwned // = 9

  /// Failure to consume since item is not owned
  case itemNotOwned // = 10

  /// Android: Requested feature is not supported by Play Store on the current device
  case featureNotSupported // = 11

  /// Android: Play Store service is not connected now - potentially transient state.
  case serviceDisconnected // = 12

  init() {
    self = .ok
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .ok
    case 1: self = .error
    case 2: self = .emptyProductList
    case 3: self = .disabled
    case 4: self = .userCanceled
    case 5: self = .serviceUnavailable
    case 6: self = .billingUnavailable
    case 7: self = .itemUnavailable
    case 8: self = .developerError
    case 9: self = .itemAlreadyOwned
    case 10: self = .itemNotOwned
    case 11: self = .featureNotSupported
    case 12: self = .serviceDisconnected
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .ok: return 0
    case .error: return 1
    case .emptyProductList: return 2
    case .disabled: return 3
    case .userCanceled: return 4
    case .serviceUnavailable: return 5
    case .billingUnavailable: return 6
    case .itemUnavailable: return 7
    case .developerError: return 8
    case .itemAlreadyOwned: return 9
    case .itemNotOwned: return 10
    case .featureNotSupported: return 11
    case .serviceDisconnected: return 12
    }
  }

}

#if swift(>=4.2)

extension IAPResponseStatus: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

/// Type of IAP product.
/// The calling app should manage the list of SKUs and their corresponding types, because:
/// iOS supports different IAP and subscription types, however the actual definition is not available through StoreKit.
/// On Android a IAP is non-consumable until it has been consumed, eliminating the explicit type definition.
enum IAPProductType: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// Consumable or non-consumable IAP.
  case iap // = 0

  /// Renewable or non-renewable IAP.
  case subscription // = 1

  init() {
    self = .iap
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .iap
    case 1: self = .subscription
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .iap: return 0
    case .subscription: return 1
    }
  }

}

#if swift(>=4.2)

extension IAPProductType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

/// https://developer.apple.com/documentation/storekit/skproductdiscount/paymentmode
enum IAPIntroductoryPricePaymentMode: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case payAsYouGo // = 0
  case payUpFront // = 1
  case freeTrial // = 2

  init() {
    self = .payAsYouGo
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .payAsYouGo
    case 1: self = .payUpFront
    case 2: self = .freeTrial
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .payAsYouGo: return 0
    case .payUpFront: return 1
    case .freeTrial: return 2
    }
  }

}

#if swift(>=4.2)

extension IAPIntroductoryPricePaymentMode: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct IAPPurchaseRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var productIdentifier: String {
    get {return _productIdentifier ?? String()}
    set {_productIdentifier = newValue}
  }
  /// Returns true if `productIdentifier` has been explicitly set.
  var hasProductIdentifier: Bool {return self._productIdentifier != nil}
  /// Clears the value of `productIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearProductIdentifier() {self._productIdentifier = nil}

  var type: IAPProductType {
    get {return _type ?? .iap}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {self._type = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _productIdentifier: String? = nil
  fileprivate var _type: IAPProductType? = nil
}

struct IAPFetchProductsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var productIdentifier: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct IAPPurchase {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var productIdentifier: String {
    get {return _productIdentifier ?? String()}
    set {_productIdentifier = newValue}
  }
  /// Returns true if `productIdentifier` has been explicitly set.
  var hasProductIdentifier: Bool {return self._productIdentifier != nil}
  /// Clears the value of `productIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearProductIdentifier() {self._productIdentifier = nil}

  var signature: String {
    get {return _signature ?? String()}
    set {_signature = newValue}
  }
  /// Returns true if `signature` has been explicitly set.
  var hasSignature: Bool {return self._signature != nil}
  /// Clears the value of `signature`. Subsequent reads from it will return its default value.
  mutating func clearSignature() {self._signature = nil}

  var originalJson: String {
    get {return _originalJson ?? String()}
    set {_originalJson = newValue}
  }
  /// Returns true if `originalJson` has been explicitly set.
  var hasOriginalJson: Bool {return self._originalJson != nil}
  /// Clears the value of `originalJson`. Subsequent reads from it will return its default value.
  mutating func clearOriginalJson() {self._originalJson = nil}

  var orderID: String {
    get {return _orderID ?? String()}
    set {_orderID = newValue}
  }
  /// Returns true if `orderID` has been explicitly set.
  var hasOrderID: Bool {return self._orderID != nil}
  /// Clears the value of `orderID`. Subsequent reads from it will return its default value.
  mutating func clearOrderID() {self._orderID = nil}

  var packageName: String {
    get {return _packageName ?? String()}
    set {_packageName = newValue}
  }
  /// Returns true if `packageName` has been explicitly set.
  var hasPackageName: Bool {return self._packageName != nil}
  /// Clears the value of `packageName`. Subsequent reads from it will return its default value.
  mutating func clearPackageName() {self._packageName = nil}

  var purchaseTime: Int64 {
    get {return _purchaseTime ?? 0}
    set {_purchaseTime = newValue}
  }
  /// Returns true if `purchaseTime` has been explicitly set.
  var hasPurchaseTime: Bool {return self._purchaseTime != nil}
  /// Clears the value of `purchaseTime`. Subsequent reads from it will return its default value.
  mutating func clearPurchaseTime() {self._purchaseTime = nil}

  var purchaseToken: String {
    get {return _purchaseToken ?? String()}
    set {_purchaseToken = newValue}
  }
  /// Returns true if `purchaseToken` has been explicitly set.
  var hasPurchaseToken: Bool {return self._purchaseToken != nil}
  /// Clears the value of `purchaseToken`. Subsequent reads from it will return its default value.
  mutating func clearPurchaseToken() {self._purchaseToken = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _productIdentifier: String? = nil
  fileprivate var _signature: String? = nil
  fileprivate var _originalJson: String? = nil
  fileprivate var _orderID: String? = nil
  fileprivate var _packageName: String? = nil
  fileprivate var _purchaseTime: Int64? = nil
  fileprivate var _purchaseToken: String? = nil
}

struct IAPProduct {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: IAPProductType {
    get {return _type ?? .iap}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {self._type = nil}

  var productIdentifier: String {
    get {return _productIdentifier ?? String()}
    set {_productIdentifier = newValue}
  }
  /// Returns true if `productIdentifier` has been explicitly set.
  var hasProductIdentifier: Bool {return self._productIdentifier != nil}
  /// Clears the value of `productIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearProductIdentifier() {self._productIdentifier = nil}

  var localizedTitle: String {
    get {return _localizedTitle ?? String()}
    set {_localizedTitle = newValue}
  }
  /// Returns true if `localizedTitle` has been explicitly set.
  var hasLocalizedTitle: Bool {return self._localizedTitle != nil}
  /// Clears the value of `localizedTitle`. Subsequent reads from it will return its default value.
  mutating func clearLocalizedTitle() {self._localizedTitle = nil}

  var localizedDescription: String {
    get {return _localizedDescription ?? String()}
    set {_localizedDescription = newValue}
  }
  /// Returns true if `localizedDescription` has been explicitly set.
  var hasLocalizedDescription: Bool {return self._localizedDescription != nil}
  /// Clears the value of `localizedDescription`. Subsequent reads from it will return its default value.
  mutating func clearLocalizedDescription() {self._localizedDescription = nil}

  var price: String {
    get {return _price ?? String()}
    set {_price = newValue}
  }
  /// Returns true if `price` has been explicitly set.
  var hasPrice: Bool {return self._price != nil}
  /// Clears the value of `price`. Subsequent reads from it will return its default value.
  mutating func clearPrice() {self._price = nil}

  var priceLocale: String {
    get {return _priceLocale ?? String()}
    set {_priceLocale = newValue}
  }
  /// Returns true if `priceLocale` has been explicitly set.
  var hasPriceLocale: Bool {return self._priceLocale != nil}
  /// Clears the value of `priceLocale`. Subsequent reads from it will return its default value.
  mutating func clearPriceLocale() {self._priceLocale = nil}

  var localizedPrice: String {
    get {return _localizedPrice ?? String()}
    set {_localizedPrice = newValue}
  }
  /// Returns true if `localizedPrice` has been explicitly set.
  var hasLocalizedPrice: Bool {return self._localizedPrice != nil}
  /// Clears the value of `localizedPrice`. Subsequent reads from it will return its default value.
  mutating func clearLocalizedPrice() {self._localizedPrice = nil}

  var isDownloadable: Bool {
    get {return _isDownloadable ?? false}
    set {_isDownloadable = newValue}
  }
  /// Returns true if `isDownloadable` has been explicitly set.
  var hasIsDownloadable: Bool {return self._isDownloadable != nil}
  /// Clears the value of `isDownloadable`. Subsequent reads from it will return its default value.
  mutating func clearIsDownloadable() {self._isDownloadable = nil}

  var downloadContentLengths: String {
    get {return _downloadContentLengths ?? String()}
    set {_downloadContentLengths = newValue}
  }
  /// Returns true if `downloadContentLengths` has been explicitly set.
  var hasDownloadContentLengths: Bool {return self._downloadContentLengths != nil}
  /// Clears the value of `downloadContentLengths`. Subsequent reads from it will return its default value.
  mutating func clearDownloadContentLengths() {self._downloadContentLengths = nil}

  var downloadContentVersion: String {
    get {return _downloadContentVersion ?? String()}
    set {_downloadContentVersion = newValue}
  }
  /// Returns true if `downloadContentVersion` has been explicitly set.
  var hasDownloadContentVersion: Bool {return self._downloadContentVersion != nil}
  /// Clears the value of `downloadContentVersion`. Subsequent reads from it will return its default value.
  mutating func clearDownloadContentVersion() {self._downloadContentVersion = nil}

  var freeTrialPeriod: String {
    get {return _freeTrialPeriod ?? String()}
    set {_freeTrialPeriod = newValue}
  }
  /// Returns true if `freeTrialPeriod` has been explicitly set.
  var hasFreeTrialPeriod: Bool {return self._freeTrialPeriod != nil}
  /// Clears the value of `freeTrialPeriod`. Subsequent reads from it will return its default value.
  mutating func clearFreeTrialPeriod() {self._freeTrialPeriod = nil}

  /// Only applies to subscriptions.
  var subscriptionPeriod: String {
    get {return _subscriptionPeriod ?? String()}
    set {_subscriptionPeriod = newValue}
  }
  /// Returns true if `subscriptionPeriod` has been explicitly set.
  var hasSubscriptionPeriod: Bool {return self._subscriptionPeriod != nil}
  /// Clears the value of `subscriptionPeriod`. Subsequent reads from it will return its default value.
  mutating func clearSubscriptionPeriod() {self._subscriptionPeriod = nil}

  var introductoryPrice: String {
    get {return _introductoryPrice ?? String()}
    set {_introductoryPrice = newValue}
  }
  /// Returns true if `introductoryPrice` has been explicitly set.
  var hasIntroductoryPrice: Bool {return self._introductoryPrice != nil}
  /// Clears the value of `introductoryPrice`. Subsequent reads from it will return its default value.
  mutating func clearIntroductoryPrice() {self._introductoryPrice = nil}

  var introductoryPricePeriod: String {
    get {return _introductoryPricePeriod ?? String()}
    set {_introductoryPricePeriod = newValue}
  }
  /// Returns true if `introductoryPricePeriod` has been explicitly set.
  var hasIntroductoryPricePeriod: Bool {return self._introductoryPricePeriod != nil}
  /// Clears the value of `introductoryPricePeriod`. Subsequent reads from it will return its default value.
  mutating func clearIntroductoryPricePeriod() {self._introductoryPricePeriod = nil}

  var introductoryPriceCycles: String {
    get {return _introductoryPriceCycles ?? String()}
    set {_introductoryPriceCycles = newValue}
  }
  /// Returns true if `introductoryPriceCycles` has been explicitly set.
  var hasIntroductoryPriceCycles: Bool {return self._introductoryPriceCycles != nil}
  /// Clears the value of `introductoryPriceCycles`. Subsequent reads from it will return its default value.
  mutating func clearIntroductoryPriceCycles() {self._introductoryPriceCycles = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _type: IAPProductType? = nil
  fileprivate var _productIdentifier: String? = nil
  fileprivate var _localizedTitle: String? = nil
  fileprivate var _localizedDescription: String? = nil
  fileprivate var _price: String? = nil
  fileprivate var _priceLocale: String? = nil
  fileprivate var _localizedPrice: String? = nil
  fileprivate var _isDownloadable: Bool? = nil
  fileprivate var _downloadContentLengths: String? = nil
  fileprivate var _downloadContentVersion: String? = nil
  fileprivate var _freeTrialPeriod: String? = nil
  fileprivate var _subscriptionPeriod: String? = nil
  fileprivate var _introductoryPrice: String? = nil
  fileprivate var _introductoryPricePeriod: String? = nil
  fileprivate var _introductoryPriceCycles: String? = nil
}

struct IAPResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: IAPResponseStatus {
    get {return _status ?? .ok}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  mutating func clearStatus() {self._status = nil}

  var statusMessage: String {
    get {return _statusMessage ?? String()}
    set {_statusMessage = newValue}
  }
  /// Returns true if `statusMessage` has been explicitly set.
  var hasStatusMessage: Bool {return self._statusMessage != nil}
  /// Clears the value of `statusMessage`. Subsequent reads from it will return its default value.
  mutating func clearStatusMessage() {self._statusMessage = nil}

  var purchases: [IAPPurchase] = []

  var products: [IAPProduct] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _status: IAPResponseStatus? = nil
  fileprivate var _statusMessage: String? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension IAPResponseStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ok"),
    1: .same(proto: "error"),
    2: .same(proto: "emptyProductList"),
    3: .same(proto: "disabled"),
    4: .same(proto: "userCanceled"),
    5: .same(proto: "serviceUnavailable"),
    6: .same(proto: "billingUnavailable"),
    7: .same(proto: "itemUnavailable"),
    8: .same(proto: "developerError"),
    9: .same(proto: "itemAlreadyOwned"),
    10: .same(proto: "itemNotOwned"),
    11: .same(proto: "featureNotSupported"),
    12: .same(proto: "serviceDisconnected"),
  ]
}

extension IAPProductType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "iap"),
    1: .same(proto: "subscription"),
  ]
}

extension IAPIntroductoryPricePaymentMode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "payAsYouGo"),
    1: .same(proto: "payUpFront"),
    2: .same(proto: "freeTrial"),
  ]
}

extension IAPPurchaseRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "IAPPurchaseRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "productIdentifier"),
    2: .same(proto: "type"),
  ]

  public var isInitialized: Bool {
    if self._productIdentifier == nil {return false}
    if self._type == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._productIdentifier)
      case 2: try decoder.decodeSingularEnumField(value: &self._type)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._productIdentifier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: IAPPurchaseRequest, rhs: IAPPurchaseRequest) -> Bool {
    if lhs._productIdentifier != rhs._productIdentifier {return false}
    if lhs._type != rhs._type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension IAPFetchProductsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "IAPFetchProductsRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "productIdentifier"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedStringField(value: &self.productIdentifier)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.productIdentifier.isEmpty {
      try visitor.visitRepeatedStringField(value: self.productIdentifier, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: IAPFetchProductsRequest, rhs: IAPFetchProductsRequest) -> Bool {
    if lhs.productIdentifier != rhs.productIdentifier {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension IAPPurchase: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "IAPPurchase"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "productIdentifier"),
    2: .same(proto: "signature"),
    3: .same(proto: "originalJson"),
    4: .same(proto: "orderId"),
    5: .same(proto: "packageName"),
    6: .same(proto: "purchaseTime"),
    7: .same(proto: "purchaseToken"),
  ]

  public var isInitialized: Bool {
    if self._productIdentifier == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._productIdentifier)
      case 2: try decoder.decodeSingularStringField(value: &self._signature)
      case 3: try decoder.decodeSingularStringField(value: &self._originalJson)
      case 4: try decoder.decodeSingularStringField(value: &self._orderID)
      case 5: try decoder.decodeSingularStringField(value: &self._packageName)
      case 6: try decoder.decodeSingularInt64Field(value: &self._purchaseTime)
      case 7: try decoder.decodeSingularStringField(value: &self._purchaseToken)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._productIdentifier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._signature {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._originalJson {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._orderID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    if let v = self._packageName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    }
    if let v = self._purchaseTime {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 6)
    }
    if let v = self._purchaseToken {
      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: IAPPurchase, rhs: IAPPurchase) -> Bool {
    if lhs._productIdentifier != rhs._productIdentifier {return false}
    if lhs._signature != rhs._signature {return false}
    if lhs._originalJson != rhs._originalJson {return false}
    if lhs._orderID != rhs._orderID {return false}
    if lhs._packageName != rhs._packageName {return false}
    if lhs._purchaseTime != rhs._purchaseTime {return false}
    if lhs._purchaseToken != rhs._purchaseToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension IAPProduct: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "IAPProduct"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "productIdentifier"),
    3: .same(proto: "localizedTitle"),
    4: .same(proto: "localizedDescription"),
    5: .same(proto: "price"),
    6: .same(proto: "priceLocale"),
    7: .same(proto: "localizedPrice"),
    8: .same(proto: "isDownloadable"),
    9: .same(proto: "downloadContentLengths"),
    10: .same(proto: "downloadContentVersion"),
    11: .same(proto: "freeTrialPeriod"),
    20: .same(proto: "subscriptionPeriod"),
    21: .same(proto: "introductoryPrice"),
    22: .same(proto: "introductoryPricePeriod"),
    23: .same(proto: "introductoryPriceCycles"),
  ]

  public var isInitialized: Bool {
    if self._type == nil {return false}
    if self._productIdentifier == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self._type)
      case 2: try decoder.decodeSingularStringField(value: &self._productIdentifier)
      case 3: try decoder.decodeSingularStringField(value: &self._localizedTitle)
      case 4: try decoder.decodeSingularStringField(value: &self._localizedDescription)
      case 5: try decoder.decodeSingularStringField(value: &self._price)
      case 6: try decoder.decodeSingularStringField(value: &self._priceLocale)
      case 7: try decoder.decodeSingularStringField(value: &self._localizedPrice)
      case 8: try decoder.decodeSingularBoolField(value: &self._isDownloadable)
      case 9: try decoder.decodeSingularStringField(value: &self._downloadContentLengths)
      case 10: try decoder.decodeSingularStringField(value: &self._downloadContentVersion)
      case 11: try decoder.decodeSingularStringField(value: &self._freeTrialPeriod)
      case 20: try decoder.decodeSingularStringField(value: &self._subscriptionPeriod)
      case 21: try decoder.decodeSingularStringField(value: &self._introductoryPrice)
      case 22: try decoder.decodeSingularStringField(value: &self._introductoryPricePeriod)
      case 23: try decoder.decodeSingularStringField(value: &self._introductoryPriceCycles)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if let v = self._productIdentifier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._localizedTitle {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._localizedDescription {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    if let v = self._price {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    }
    if let v = self._priceLocale {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    }
    if let v = self._localizedPrice {
      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
    }
    if let v = self._isDownloadable {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
    }
    if let v = self._downloadContentLengths {
      try visitor.visitSingularStringField(value: v, fieldNumber: 9)
    }
    if let v = self._downloadContentVersion {
      try visitor.visitSingularStringField(value: v, fieldNumber: 10)
    }
    if let v = self._freeTrialPeriod {
      try visitor.visitSingularStringField(value: v, fieldNumber: 11)
    }
    if let v = self._subscriptionPeriod {
      try visitor.visitSingularStringField(value: v, fieldNumber: 20)
    }
    if let v = self._introductoryPrice {
      try visitor.visitSingularStringField(value: v, fieldNumber: 21)
    }
    if let v = self._introductoryPricePeriod {
      try visitor.visitSingularStringField(value: v, fieldNumber: 22)
    }
    if let v = self._introductoryPriceCycles {
      try visitor.visitSingularStringField(value: v, fieldNumber: 23)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: IAPProduct, rhs: IAPProduct) -> Bool {
    if lhs._type != rhs._type {return false}
    if lhs._productIdentifier != rhs._productIdentifier {return false}
    if lhs._localizedTitle != rhs._localizedTitle {return false}
    if lhs._localizedDescription != rhs._localizedDescription {return false}
    if lhs._price != rhs._price {return false}
    if lhs._priceLocale != rhs._priceLocale {return false}
    if lhs._localizedPrice != rhs._localizedPrice {return false}
    if lhs._isDownloadable != rhs._isDownloadable {return false}
    if lhs._downloadContentLengths != rhs._downloadContentLengths {return false}
    if lhs._downloadContentVersion != rhs._downloadContentVersion {return false}
    if lhs._freeTrialPeriod != rhs._freeTrialPeriod {return false}
    if lhs._subscriptionPeriod != rhs._subscriptionPeriod {return false}
    if lhs._introductoryPrice != rhs._introductoryPrice {return false}
    if lhs._introductoryPricePeriod != rhs._introductoryPricePeriod {return false}
    if lhs._introductoryPriceCycles != rhs._introductoryPriceCycles {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension IAPResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "IAPResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "statusMessage"),
    3: .same(proto: "purchases"),
    4: .same(proto: "products"),
  ]

  public var isInitialized: Bool {
    if self._status == nil {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.purchases) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.products) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self._status)
      case 2: try decoder.decodeSingularStringField(value: &self._statusMessage)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.purchases)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.products)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if let v = self._statusMessage {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if !self.purchases.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.purchases, fieldNumber: 3)
    }
    if !self.products.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.products, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: IAPResponse, rhs: IAPResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs._statusMessage != rhs._statusMessage {return false}
    if lhs.purchases != rhs.purchases {return false}
    if lhs.products != rhs.products {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
